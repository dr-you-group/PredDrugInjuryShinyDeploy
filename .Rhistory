'O Count',
'Val (%)',
'O Incidence (%)',
'timeStamp'
),
labels = c('Database used to develop the model',
'Database used to evaluate model',
'Target population - the patients you want to predict risk for',
'Outcome - what you want to predict',
'Model type',
'Id for the covariate/settings used',
'Time-at-risk period',
'Area under the reciever operating characteristics (test or validation)',
'Area under the precision recall curve (test or validation)',
'Target population size in the data',
'Outcome count in the data',
'The percentage of data used to evaluate the model',
'Percentage of target population that have outcome during time-at-risk',
'date and time of execution')
), 1,
function(x) th(title=x[2], x[1])
)
)
)
)
)
)
)
summaryServer <- function(
id,
summaryTable,
cNamesExclude = c('studyId','Analysis','analysisId','resultId','researcherId','addExposureDaysToStart','addExposureDaysToEnd', 'plpResultLocation', 'plpResultLoad')
) {
shiny::moduleServer(
id,
function(input, output, session) {
# check if this makes drpdwn filter
summaryTable$T <- as.factor(summaryTable$T)
summaryTable$O <- as.factor(summaryTable$O)
output$summaryTable <- DT::renderDataTable(
DT::datatable(
summaryTable[,!colnames(summaryTable)%in%cNamesExclude],
rownames= FALSE,
filter = 'top',
extensions = 'Buttons',
container = htmltools::withTags(
table(
class = 'display',
thead(
#tags$th(title=active_columns[i], colnames(data)[i])
tr(apply(
data.frame(
colnames = c(
'Dev',
'Val',
'T',
'O',
'Model',
'Covariate setting',
'TAR',
'AUROC',
'AUPRC',
'T Size',
'O Count',
'Val (%)',
'O Incidence (%)',
'timeStamp'
),
labels = c('Database used to develop the model',
'Database used to evaluate model',
'Target population - the patients you want to predict risk for',
'Outcome - what you want to predict',
'Model type',
'Id for the covariate/settings used',
'Time-at-risk period',
'Area under the reciever operating characteristics (test or validation)',
'Area under the precision recall curve (test or validation)',
'Target population size in the data',
'Outcome count in the data',
'The percentage of data used to evaluate the model',
'Percentage of target population that have outcome during time-at-risk',
'date and time of execution')
), 1,
function(x) th(title=x[2], x[1])
)
)
)
)
)
)
)
selectedRow <- shiny::reactive({
input$summaryTable_rows_selected
})
return(selectedRow)
}
)
}
summaryServer('sumTab', summaryTable)
source("processing.R")
result <- "./data"
validation <- NULL
useDatabase <- NULL
usePlpObject <- NULL
useFileSystem <- NULL
shinySettings <- list(result = result, validation = validation,
useDatabase = useDatabase, usePlpObject = usePlpObject,
useFileSystem = useFileSystem)
.GlobalEnv$shinySettings <- shinySettings
# EDIT FOR REPO OR DATABASE
useFileSystem <- .GlobalEnv$shinySettings$useFileSystem
if(!is.null(.GlobalEnv$shinySettings$result)){
ParallelLogger::logInfo('Loading results from file system')
valid <- ifelse(class(.GlobalEnv$shinySettings$result)=='character', dir.exists(.GlobalEnv$shinySettings$result),F)
if(valid){
result <- 'file'
validation <- NULL
inputType <- 'file'
summaryTable <- getSummary(inputType = 'file',
result = .GlobalEnv$shinySettings$result)
summaryTable$covariateSetting <- 1
myResultList <- lapply(1:nrow(summaryTable), function(i){paste( 'Dev:', as.character(summaryTable$Dev[i]),
'- Val:',as.character(summaryTable$Val[i]),
'-T:', as.character(summaryTable$T[i]),
'- O:',as.character(summaryTable$O[i]),
'- TAR:', as.character(summaryTable$TAR[i]),
'- Model:', as.character(summaryTable$Model[i]),
'Predictor:', as.character(summaryTable$covariateSetting[i]))})
}
}
source("processing.R")
result <- "./data"
validation <- NULL
useDatabase <- NULL
usePlpObject <- NULL
useFileSystem <- NULL
shinySettings <- list(result = result, validation = validation,
useDatabase = useDatabase, usePlpObject = usePlpObject,
useFileSystem = useFileSystem)
.GlobalEnv$shinySettings <- shinySettings
# EDIT FOR REPO OR DATABASE
useFileSystem <- .GlobalEnv$shinySettings$useFileSystem
if(!is.null(.GlobalEnv$shinySettings$result)){
ParallelLogger::logInfo('Loading results from file system')
valid <- ifelse(class(.GlobalEnv$shinySettings$result)=='character', dir.exists(.GlobalEnv$shinySettings$result),F)
if(valid){
result <- 'file'
validation <- NULL
inputType <- 'file'
summaryTable <- getSummary(inputType = 'file',
result = .GlobalEnv$shinySettings$result)
summaryTable$covariateSetting <- 1
myResultList <- lapply(1:nrow(summaryTable), function(i){paste( 'Dev:', as.character(summaryTable$Dev[i]),
'- Val:',as.character(summaryTable$Val[i]),
'-T:', as.character(summaryTable$T[i]),
'- O:',as.character(summaryTable$O[i]),
'- TAR:', as.character(summaryTable$TAR[i]),
'- Model:', as.character(summaryTable$Model[i]),
'Predictor:', as.character(summaryTable$covariateSetting[i]))})
}
}
summaryServer('sumTab', summaryTable)
summaryTable
summaryTable
id
shiny::moduleServer(
id,
function(input, output, session) {
# check if this makes drpdwn filter
summaryTable$T <- as.factor(summaryTable$T)
summaryTable$O <- as.factor(summaryTable$O)
output$summaryTable <- DT::renderDataTable(
DT::datatable(
summaryTable[,!colnames(summaryTable)%in%cNamesExclude],
rownames= FALSE,
filter = 'top',
extensions = 'Buttons',
container = htmltools::withTags(
table(
class = 'display',
thead(
#tags$th(title=active_columns[i], colnames(data)[i])
tr(apply(
data.frame(
colnames = c(
'Dev',
'Val',
'T',
'O',
'Model',
'Covariate setting',
'TAR',
'AUROC',
'AUPRC',
'T Size',
'O Count',
'Val (%)',
'O Incidence (%)',
'timeStamp'
),
labels = c('Database used to develop the model',
'Database used to evaluate model',
'Target population - the patients you want to predict risk for',
'Outcome - what you want to predict',
'Model type',
'Id for the covariate/settings used',
'Time-at-risk period',
'Area under the reciever operating characteristics (test or validation)',
'Area under the precision recall curve (test or validation)',
'Target population size in the data',
'Outcome count in the data',
'The percentage of data used to evaluate the model',
'Percentage of target population that have outcome during time-at-risk',
'date and time of execution')
), 1,
function(x) th(title=x[2], x[1])
)
)
)
)
)
)
)
selectedRow <- shiny::reactive({
input$summaryTable_rows_selected
})
return(selectedRow)
}
)
plpResult <- shiny::reactive({getPlpResult(result,validation,summaryTable, inputType,trueRow())})
plpResult
getPlpResult(result,validation,summaryTable, inputType,trueRow())
getPlpResult <- function(result,validation,summaryTable, inputType,trueRow){
if( inputType == 'file') {
tempResult <- NULL
loc <- summaryTable[trueRow,]$plpResultLocation
locLoaderFunc <- summaryTable[trueRow,]$plpResultLoad
logLocation <- gsub('plpResult','plpLog.txt', gsub('validationResult.rds','plpLog.txt',gsub('plpResult.rds','plpLog.txt', as.character(loc))))
if(file.exists(logLocation)){
txt <- readLines(logLocation)
} else{
txt <- 'log not available'
}
if(file.exists(as.character(loc))){
tempResult <- do.call(as.character(locLoaderFunc), list(as.character(loc)))
tempResult$log <- txt
tempResult$type <- ifelse(length(grep('/Validation',loc))>0,'validation','test')
}
}else {
stop('Incorrect class')
}
return(tempResult)
}
getPlpResult(result,validation,summaryTable, inputType,trueRow())
tempResult <- NULL
loc <- summaryTable[trueRow,]$plpResultLocation
trueRow <- trueRow()
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(value = 1)
trueRow
plpResult <- shiny::reactive({getPlpResult(result,validation,summaryTable, inputType,trueRow())})
plpResult
getPlpResult(result,validation,summaryTable, inputType,trueRow())
trueRow()
getPlpResult(result,validation,summaryTable, inputType, trueRow)
trueRow <- shiny::reactiveVal(value = 1)
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(value = 1)
# row selection updates dropdowns
shiny::observeEvent(input$summaryTable_rows_selected,{
#selectedRow(input$summaryTable_rows_selected)
trueRow(filterIndex()[input$summaryTable_rows_selected])
shiny::updateSelectInput(session, "selectResult",
selected = myResultList[[trueRow()]]
)
})
#drop downs update row and other drop down
sumProxy <- DT::dataTableProxy("summaryTable", session = session)
plpResult <- shiny::reactive({getPlpResult(result,validation,summaryTable, inputType, trueRow)})
plpResult
getPlpResult <- function(result, validation, summaryTable, inputType, trueRow){
if( inputType == 'file') {
tempResult <- NULL
loc <- summaryTable[trueRow,]$plpResultLocation
locLoaderFunc <- summaryTable[trueRow,]$plpResultLoad
logLocation <- gsub('plpResult','plpLog.txt', gsub('validationResult.rds','plpLog.txt',gsub('plpResult.rds','plpLog.txt', as.character(loc))))
if(file.exists(logLocation)){
txt <- readLines(logLocation)
} else{
txt <- 'log not available'
}
if(file.exists(as.character(loc))){
tempResult <- do.call(as.character(locLoaderFunc), list(as.character(loc)))
tempResult$log <- txt
tempResult$type <- ifelse(length(grep('/Validation',loc))>0,'validation','test')
}
}else {
stop('Incorrect class')
}
return(tempResult)
}
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(value = 1)
# row selection updates dropdowns
shiny::observeEvent(input$summaryTable_rows_selected,{
#selectedRow(input$summaryTable_rows_selected)
trueRow(filterIndex()[input$summaryTable_rows_selected])
shiny::updateSelectInput(session, "selectResult",
selected = myResultList[[trueRow()]]
)
})
#drop downs update row and other drop down
sumProxy <- DT::dataTableProxy("summaryTable", session = session)
shiny::observeEvent(input$selectResult,{
val <- which(myResultList==input$selectResult)
trueRow(val)
DT::selectRows(sumProxy, which(filterIndex()==val)) # reset filter here?
})
summaryTable[trueRow,]
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(value = 1)
summaryTable
summaryTable[trueRow,]
summaryTable[trueRow,]
trueRow <- shiny::reactiveVal(value = 1)
trueRow
trueRow()
trueRow(filterIndex()[input$summaryTable_rows_selected])
# this function finds the filter index
getFilter <- function(summaryTable,input){
ind <- 1:nrow(summaryTable)
if(input$devDatabase!='All'){
ind <- intersect(ind,which(as.character(summaryTable$Dev)==input$devDatabase))
}
if(input$valDatabase!='All'){
ind <- intersect(ind,which(as.character(summaryTable$Val)==input$valDatabase))
}
if(input$T!='All'){
ind <- intersect(ind,which(summaryTable$T==input$T))
}
if(input$O!='All'){
ind <- intersect(ind,which(summaryTable$O==input$O))
}
if(input$modelSettingName!='All'){
ind <- intersect(ind,which(as.character(summaryTable$Model)==input$modelSettingName))
}
if(input$TAR!='All'){
ind <- intersect(ind,which(as.character(summaryTable$TAR)==input$TAR))
}
return(ind)
}
filterIndex()
{getPlpResult(result,validation,summaryTable, inputType, trueRow)}
plpResult <- shiny::reactive({getPlpResult(result,validation,summaryTable, inputType, trueRow)})
plpResult <- shiny::reactive({getPlpResult(result,validation,summaryTable, inputType, trueRow)})
plpResult
shiny::runApp()
shiny::runApp()
runApp()
trueRow(val
)
trueRow <- shiny::reactiveVal(value = 1)
trueRow(val)
which(myResultList==input$selectResult)
runApp()
filterIndex <- shiny::reactive({getFilter(summaryTable,input)})
filterIndex
myResultList <- lapply(1:nrow(summaryTable), function(i){paste( 'Dev:', as.character(summaryTable$Dev[i]),
'- Val:',as.character(summaryTable$Val[i]),
'-T:', as.character(summaryTable$T[i]),
'- O:',as.character(summaryTable$O[i]),
'- TAR:', as.character(summaryTable$TAR[i]),
'- Model:', as.character(summaryTable$Model[i]),
'Predictor:', as.character(summaryTable$covariateSetting[i]))})
myResultList
shiny::runApp()
logLocation <- gsub('plpResult','plpLog.txt', gsub('validationResult.rds','plpLog.txt',gsub('plpResult.rds','plpLog.txt', as.character(loc))))
loc <- summaryTable$plpResultLocation
loc
logLocation <- gsub('plpResult','plpLog.txt', gsub('validationResult.rds','plpLog.txt',gsub('plpResult.rds','plpLog.txt', as.character(loc))))
logLocation
locLoaderFunc <- summaryTable$plpResultLoad
locLoaderFunc
runApp()
shiny::runApp()
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(value = 1)
# row selection updates dropdowns
shiny::observeEvent(input$summaryTable_rows_selected,{
#selectedRow(input$summaryTable_rows_selected)
trueRow(filterIndex()[input$summaryTable_rows_selected])
shiny::updateSelectInput(session, "selectResult",
selected = myResultList[[trueRow()]]
)
})
shiny::observeEvent(input$summaryTable_rows_selected,{
#selectedRow(input$summaryTable_rows_selected)
trueRow(filterIndex()[input$summaryTable_rows_selected])
shiny::updateSelectInput(session, "selectResult",
selected = myResultList[[trueRow()]]
)
})
shiny::runApp()
runApp()
runApp()
runApp()
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(1)
trueRow()
runApp()
# SELECTING RESULTS - for PERFORMANCE/MODEl
##selectedRow <- shiny::reactiveVal(value = 1)
trueRow <- shiny::reactiveVal(1)
# row selection updates dropdowns
shiny::observeEvent(input$summaryTable_rows_selected,{
#selectedRow(input$summaryTable_rows_selected)
trueRow(filterIndex()[input$summaryTable_rows_selected])
shiny::updateSelectInput(session, "selectResult",
selected = myResultList[[trueRow()]]
)
})
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
result <- readRDS("C:/Users/whyj1/Desktop/PLPViewer/data/KonyangUniv/Analysis_1/plpResult/runPlp.rds")
result
eval <- as.data.frame(result$performanceEvaluation$evaluationStatistics)
eval
eval <- tidyr::pivot_wider(
data = eval %>%
dplyr::mutate(variable = paste(evaluation, metric, sep = '_')) %>%
dplyr::select(-evaluation, -metric),
names_from = 'variable',
values_from = 'value'
)
eval
eval$thresholdSummary
data = eval %>%
dplyr::mutate(variable = paste(evaluation, metric, sep = '_')) %>%
dplyr::select(-evaluation, -metric)
data  <-  eval %>%
dplyr::mutate(variable = paste(evaluation, metric, sep = '_')) %>%
dplyr::select(-evaluation, -metric)
evaluation
runApp()
result$performanceEvaluation
result <- readRDS("C:/Users/whyj1/Desktop/PLPViewer/data/KonyangUniv/Analysis_1/plpResult/runPlp.rds")
result$performanceEvaluatio
result$performanceEvaluation$thresholdSummary
eval <- result$performanceEvaluation
eval$thresholdSummary
eval$thresholdSummary[eval$thresholdSummary$evaluation %in% c('test','validation'),]
runApp()
result$model
result
plpResult <- readRDS("C:/Users/whyj1/Desktop/PLPViewer/data/KonyangUniv/Analysis_1/plpResult/runPlp.rds")
plpResult$model
plpResult
runApp()
runApp()
runApp()
plpResult
plpResult$covariateSummary
plotCovariateSummary(formatCovariateTable(plpResult()$covariateSummary))
plotCovariateSummary(formatCovariateTable(plpResult$covariateSummary))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
result <- "C:/Users/whyj1/Desktop/PLPViewer/data/KonyangUniv/Analysis_1/plpResult/runPlp.rds"
result$settings
result
result <- readRDS("C:/Users/whyj1/Desktop/PLPViewer/data/KonyangUniv/Analysis_1/plpResult/runPlp.rds")
result
list(result)
devPerformance
allPerformances
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(xgboost)
library(xgboost)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
